{"ast":null,"code":"// api.js\n\nimport axios from 'axios';\n\n// Función para obtener los resultados de la API\nexport const fetchResultsFromAPI = async searchQuery => {\n  try {\n    const response = await axios.post('http://localhost:9200/restaurants/_search', {\n      size: 1000,\n      query: {\n        bool: {\n          should: [{\n            term: {\n              \"name.keyword\": searchQuery.toLowerCase()\n            }\n          }, {\n            match: {\n              \"name\": searchQuery.toLowerCase()\n            }\n          }, {\n            wildcard: {\n              \"name\": `*${searchQuery.toLowerCase()}*`\n            }\n          }, {\n            wildcard: {\n              \"meal_type\": `*${searchQuery.toLowerCase()}*`\n            }\n          }],\n          minimum_should_match: 1\n        }\n      }\n    });\n    const getPriceSymbols = averagePrice => {\n      if (averagePrice <= 50) return '€';\n      if (averagePrice <= 100) return '€€';\n      if (averagePrice <= 150) return '€€€';\n      return '€€€€';\n    };\n    const processedHits = response.data.hits.hits.map(hit => {\n      var _restaurant$menu_opti;\n      const restaurant = hit._source;\n\n      // Asegurándonos de que 'name' existe antes de hacer replace\n      if (restaurant.name) {\n        restaurant.name = restaurant.name.replace(/\\s+/g, '-').toLowerCase();\n      }\n      if (!restaurant.price && ((_restaurant$menu_opti = restaurant.menu_options) === null || _restaurant$menu_opti === void 0 ? void 0 : _restaurant$menu_opti.length) > 0) {\n        const menuPrices = restaurant.menu_options.map(menu => parseFloat(menu.price.replace(/[^0-9.,]/g, '').replace(',', '.')) || 0).filter(price => price > 0);\n        if (menuPrices.length > 0) {\n          const averagePrice = menuPrices.reduce((a, b) => a + b, 0) / menuPrices.length;\n          restaurant.price = getPriceSymbols(averagePrice);\n        }\n      }\n      return {\n        ...hit,\n        _source: restaurant\n      };\n    });\n    const allMealTypes = processedHits.reduce((types, hit) => {\n      return [...types, ...processMealTypes(hit._source.meal_type)];\n    }, []);\n    return {\n      processedHits,\n      uniqueMealTypes: [...new Set(allMealTypes)].sort(),\n      priceRanges: [...new Set(processedHits.map(hit => hit._source.price).filter(price => price))]\n    };\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n};\nconst processMealTypes = mealTypeValue => {\n  if (typeof mealTypeValue === 'string') {\n    return mealTypeValue.split(' ').filter(type => type.trim());\n  }\n  if (Array.isArray(mealTypeValue)) {\n    return mealTypeValue;\n  }\n  return [];\n};","map":{"version":3,"names":["axios","fetchResultsFromAPI","searchQuery","response","post","size","query","bool","should","term","toLowerCase","match","wildcard","minimum_should_match","getPriceSymbols","averagePrice","processedHits","data","hits","map","hit","_restaurant$menu_opti","restaurant","_source","name","replace","price","menu_options","length","menuPrices","menu","parseFloat","filter","reduce","a","b","allMealTypes","types","processMealTypes","meal_type","uniqueMealTypes","Set","sort","priceRanges","error","console","mealTypeValue","split","type","trim","Array","isArray"],"sources":["/home/raul/Escritorio/RIWS/RIWS-Crawling/Dineology/dineology-search/src/services/api.js"],"sourcesContent":["// api.js\n\nimport axios from 'axios';\n\n// Función para obtener los resultados de la API\nexport const fetchResultsFromAPI = async (searchQuery) => {\n  try {\n    const response = await axios.post('http://localhost:9200/restaurants/_search', {\n      size: 1000,\n      query: {\n        bool: {\n          should: [\n            { term: { \"name.keyword\": searchQuery.toLowerCase() } },\n            { match: { \"name\": searchQuery.toLowerCase() } },\n            { wildcard: { \"name\": `*${searchQuery.toLowerCase()}*` } },\n            { wildcard: { \"meal_type\": `*${searchQuery.toLowerCase()}*` } }\n          ],\n          minimum_should_match: 1\n        }\n      }\n    });\n\n    const getPriceSymbols = (averagePrice) => {\n      if (averagePrice <= 50) return '€';\n      if (averagePrice <= 100) return '€€';\n      if (averagePrice <= 150) return '€€€';\n      return '€€€€';\n    };\n\n    const processedHits = response.data.hits.hits.map(hit => {\n      const restaurant = hit._source;\n\n      // Asegurándonos de que 'name' existe antes de hacer replace\n      if (restaurant.name) {\n        restaurant.name = restaurant.name.replace(/\\s+/g, '-').toLowerCase();\n      }\n\n      if (!restaurant.price && restaurant.menu_options?.length > 0) {\n        const menuPrices = restaurant.menu_options\n          .map(menu => parseFloat(menu.price.replace(/[^0-9.,]/g, '').replace(',', '.')) || 0)\n          .filter(price => price > 0);\n\n        if (menuPrices.length > 0) {\n          const averagePrice = menuPrices.reduce((a, b) => a + b, 0) / menuPrices.length;\n          restaurant.price = getPriceSymbols(averagePrice);\n        }\n      }\n\n      return {\n        ...hit,\n        _source: restaurant\n      };\n    });\n\n    const allMealTypes = processedHits.reduce((types, hit) => {\n      return [...types, ...processMealTypes(hit._source.meal_type)];\n    }, []);\n\n    return {\n      processedHits,\n      uniqueMealTypes: [...new Set(allMealTypes)].sort(),\n      priceRanges: [...new Set(processedHits.map(hit => hit._source.price).filter(price => price))]\n    };\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n};\n\nconst processMealTypes = (mealTypeValue) => {\n  if (typeof mealTypeValue === 'string') {\n    return mealTypeValue.split(' ').filter(type => type.trim());\n  }\n  if (Array.isArray(mealTypeValue)) {\n    return mealTypeValue;\n  }\n  return [];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}