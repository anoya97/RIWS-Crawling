{"ast":null,"code":"import axios from 'axios';\nconst fetchResultsFromAPI = async searchQuery => {\n  const response = await axios.post('http://localhost:9200/restaurants/_search', {\n    size: 1000,\n    query: {\n      bool: {\n        should: [{\n          term: {\n            \"name.keyword\": searchQuery.toLowerCase()\n          }\n        }, {\n          match: {\n            \"name\": searchQuery.toLowerCase()\n          }\n        }, {\n          wildcard: {\n            \"name\": `*${searchQuery.toLowerCase()}*`\n          }\n        }, {\n          wildcard: {\n            \"meal_type\": `*${searchQuery.toLowerCase()}*`\n          }\n        }],\n        minimum_should_match: 1\n      }\n    }\n  });\n  const getPriceSymbols = averagePrice => {\n    if (averagePrice <= 50) return '€';\n    if (averagePrice <= 100) return '€€';\n    if (averagePrice <= 150) return '€€€';\n    return '€€€€';\n  };\n  const processedHits = response.data.hits.hits.map(hit => {\n    var _restaurant$menu_opti;\n    const restaurant = hit._source;\n    if (!restaurant.price && ((_restaurant$menu_opti = restaurant.menu_options) === null || _restaurant$menu_opti === void 0 ? void 0 : _restaurant$menu_opti.length) > 0) {\n      const menuPrices = restaurant.menu_options.map(menu => parseFloat(menu.price.replace(/[^0-9.,]/g, '').replace(',', '.')) || 0).filter(price => price > 0);\n      if (menuPrices.length > 0) {\n        const averagePrice = menuPrices.reduce((a, b) => a + b, 0) / menuPrices.length;\n        restaurant.price = getPriceSymbols(averagePrice);\n      }\n    }\n    return {\n      ...hit,\n      _source: restaurant\n    };\n  });\n  const allMealTypes = processedHits.reduce((types, hit) => {\n    return [...types, ...processMealTypes(hit._source.meal_type)];\n  }, []);\n  return {\n    processedHits,\n    uniqueMealTypes: [...new Set(allMealTypes)].sort(),\n    priceRanges: [...new Set(processedHits.map(hit => hit._source.price).filter(price => price))]\n  };\n};\nconst processMealTypes = mealTypeValue => {\n  if (typeof mealTypeValue === 'string') {\n    return mealTypeValue.split(' ').filter(type => type.trim());\n  }\n  if (Array.isArray(mealTypeValue)) {\n    return mealTypeValue;\n  }\n  return [];\n};\nexport { fetchResultsFromAPI };","map":{"version":3,"names":["axios","fetchResultsFromAPI","searchQuery","response","post","size","query","bool","should","term","toLowerCase","match","wildcard","minimum_should_match","getPriceSymbols","averagePrice","processedHits","data","hits","map","hit","_restaurant$menu_opti","restaurant","_source","price","menu_options","length","menuPrices","menu","parseFloat","replace","filter","reduce","a","b","allMealTypes","types","processMealTypes","meal_type","uniqueMealTypes","Set","sort","priceRanges","mealTypeValue","split","type","trim","Array","isArray"],"sources":["/home/raul/Escritorio/RIWS/RIWS-Crawling/Dineology/dineology-search/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst fetchResultsFromAPI = async (searchQuery) => {\n  const response = await axios.post('http://localhost:9200/restaurants/_search', {\n    size: 1000,\n    query: {\n      bool: {\n        should: [\n          { term: { \"name.keyword\": searchQuery.toLowerCase() } },\n          { match: { \"name\": searchQuery.toLowerCase() } },\n          { wildcard: { \"name\": `*${searchQuery.toLowerCase()}*` } },\n          { wildcard: { \"meal_type\": `*${searchQuery.toLowerCase()}*` } }\n        ],\n        minimum_should_match: 1\n      }\n    }\n  });\n\n  const getPriceSymbols = (averagePrice) => {\n    if (averagePrice <= 50) return '€';\n    if (averagePrice <= 100) return '€€';\n    if (averagePrice <= 150) return '€€€';\n    return '€€€€';\n  };\n\n  const processedHits = response.data.hits.hits.map(hit => {\n    const restaurant = hit._source;\n\n    if (!restaurant.price && restaurant.menu_options?.length > 0) {\n      const menuPrices = restaurant.menu_options\n        .map(menu => parseFloat(menu.price.replace(/[^0-9.,]/g, '').replace(',', '.')) || 0)\n        .filter(price => price > 0);\n\n      if (menuPrices.length > 0) {\n        const averagePrice = menuPrices.reduce((a, b) => a + b, 0) / menuPrices.length;\n        restaurant.price = getPriceSymbols(averagePrice);\n      }\n    }\n\n    return {\n      ...hit,\n      _source: restaurant\n    };\n  });\n\n  const allMealTypes = processedHits.reduce((types, hit) => {\n    return [...types, ...processMealTypes(hit._source.meal_type)];\n  }, []);\n\n  return {\n    processedHits,\n    uniqueMealTypes: [...new Set(allMealTypes)].sort(),\n    priceRanges: [...new Set(processedHits.map(hit => hit._source.price).filter(price => price))]\n  };\n};\n\nconst processMealTypes = (mealTypeValue) => {\n  if (typeof mealTypeValue === 'string') {\n    return mealTypeValue.split(' ').filter(type => type.trim());\n  }\n  if (Array.isArray(mealTypeValue)) {\n    return mealTypeValue;\n  }\n  return [];\n};\n\nexport { fetchResultsFromAPI };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}